{"version":3,"sources":["styles.js","components/CopyCat.js","containers/CopyCatContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","divStyles","fontFamily","fontSize","color","backgroundColor","minHeight","minWidth","display","flexDirection","alignItems","justifyContent","imgStyles","marginTop","width","images","CopyCat","style","marginBottom","this","props","name","type","value","input","onChange","handleChange","alt","src","copying","onClick","toggleTape","React","Component","CopyCatContainer","state","bind","setState","e","console","log","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOA+BaA,EAAS,CACpBC,UAnBgB,CAChBC,WAdiB,6CAejBC,SAde,MAefC,MAPY,MAQZC,gBAfsB,UAgBtBC,UAfgB,QAgBhBC,SAfe,IAgBfC,QAfc,OAgBdC,cAfoB,SAgBpBC,WAfiB,SAgBjBC,eAfqB,UAyBrBC,UAPgB,CAChBC,UAjBgB,OAkBhBC,MAjBY,QCLRC,EACK,uEADLA,EAEM,wEAgCGC,E,uKAzBX,OACE,yBAAKC,MAAOjB,EAAOC,WACjB,wBAAIgB,MAAO,CAACC,aAAc,KAA1B,YAAyCC,KAAKC,MAAMC,KAAOF,KAAKC,MAAMC,KAAO,OAC7E,2BAAOC,KAAK,OAAOC,MAAOJ,KAAKC,MAAMI,MAAOC,SAAUN,KAAKC,MAAMM,eACjE,yBAAKT,MAAOjB,EAAOY,UACjBe,IAAI,MACJC,IAAKT,KAAKC,MAAMS,QAAUd,EAAiBA,EAC3Ce,QAASX,KAAKC,MAAMW,aAEtB,2BACGZ,KAAKC,MAAMS,SAAWV,KAAKC,MAAMI,Y,GAbtBQ,IAAMC,WCFfC,EAAb,kDACE,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAEDe,MAAQ,CACXN,SAAS,EACTL,MAAO,IAGT,EAAKO,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKV,aAAe,EAAKA,aAAaU,KAAlB,gBATH,EADrB,yDAcIjB,KAAKkB,SAAS,CAAER,SAAUV,KAAKgB,MAAMN,YAdzC,mCAiBeS,GACXC,QAAQC,IAAIF,EAAEG,QACdtB,KAAKkB,SAAS,CAACb,MAAOc,EAAEG,OAAOlB,UAnBnC,+BAuBI,OACE,kBAAC,EAAD,CACAM,QAASV,KAAKgB,MAAMN,QACpBE,WAAYZ,KAAKY,WACjBL,aAAcP,KAAKO,aACnBF,MAAOL,KAAKgB,MAAMX,YA5BxB,GAAsCQ,IAAMC,WCC7BS,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.730a0b97.chunk.js","sourcesContent":["const fontFamily = 'Comic Sans MS, Lucida Handwriting, cursive';\r\nconst fontSize = '5vh';\r\nconst backgroundColor = '#282c34';\r\nconst minHeight = '100vh';\r\nconst minWidth = 400;\r\nconst display = 'flex';\r\nconst flexDirection = 'column';\r\nconst alignItems = 'center';\r\nconst justifyContent = 'center';\r\nconst color = 'red';\r\nconst marginTop = '20px';\r\nconst width = '50%';\r\n\r\nconst divStyles = {\r\n  fontFamily: fontFamily,\r\n  fontSize: fontSize,\r\n  color: color,\r\n  backgroundColor: backgroundColor,\r\n  minHeight: minHeight,\r\n  minWidth: minWidth,\r\n  display: display,\r\n  flexDirection: flexDirection,\r\n  alignItems: alignItems,\r\n  justifyContent: justifyContent,\r\n};\r\n\r\nconst imgStyles = {\r\n  marginTop: marginTop,\r\n  width: width\r\n};\r\n\r\nexport const styles = {\r\n  divStyles: divStyles,\r\n  imgStyles: imgStyles\r\n};\r\n","import React from 'react';\r\nimport {styles} from '../styles';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst images = {\r\n  copycat: 'https://content.codecademy.com/courses/React/react_photo_copycat.png',\r\n  quietcat: 'https://content.codecademy.com/courses/React/react_photo_quietcat.png'\r\n};\r\n\r\n\r\nclass CopyCat extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div style={styles.divStyles}>\r\n        <h1 style={{marginBottom: 40}}>Copy Cat {this.props.name ? this.props.name : 'Jon' }</h1>\r\n        <input type='text' value={this.props.input} onChange={this.props.handleChange} />\r\n        <img style={styles.imgStyles} \r\n          alt='cat'\r\n          src={this.props.copying ? images.copycat : images.quietcat}\r\n          onClick={this.props.toggleTape}\r\n        />\r\n        <p>\r\n          {this.props.copying && this.props.input}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nCopyCat.propTypes = {\r\n  input: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  handleChange: PropTypes.func.isRequired,\r\n  copying: PropTypes.string.isRequired,\r\n  toggleTape: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CopyCat;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport CopyCat from '../components/CopyCat.js'\r\n\r\n/* const images = {\r\n  copycat: 'https://content.codecademy.com/courses/React/react_photo_copycat.png',\r\n  quietcat: 'https://content.codecademy.com/courses/React/react_photo_quietcat.png'\r\n}; */\r\n\r\n\r\nexport class CopyCatContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      copying: true,\r\n      input: ''\r\n    };\r\n\r\n    this.toggleTape = this.toggleTape.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  toggleTape() {\r\n    this.setState({ copying: !this.state.copying })\r\n  }\r\n\r\n  handleChange(e){\r\n    console.log(e.target);\r\n    this.setState({input: e.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CopyCat \r\n      copying={this.state.copying}\r\n      toggleTape={this.toggleTape}\r\n      handleChange={this.handleChange}\r\n      input={this.state.input}\r\n       />\r\n    );\r\n  };\r\n}\r\n\r\n\r\n/* ReactDOM.render(<CopyCatContainer />, \r\n  document.getElementById('app'));  */\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport { CopyCatContainer } from './containers/CopyCatContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <CopyCatContainer />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}